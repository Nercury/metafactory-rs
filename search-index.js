var searchIndex = {};
searchIndex['metafactory'] = {"items":[[0,"","metafactory","<a href=\"https://github.com/Nercury/metafactory-rs\">\n    <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png\" alt=\"Fork me on GitHub\">\n</a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Factory","","A factory proxy."],[3,"metafactory","","Create a new `MetaFactory` for any compatible value source."],[3,"argless_as_factory","","Create a new `MetaFactory` and return `Factory` in `Box<Any>` for source with no arguments."],[0,"aggregate","","Implements a factory that aggregates the results of other factories of\nthe same type."],[1,"Aggregate","metafactory::aggregate","Proxy for initializing aggregate factory without caring about the type used."],[10,"new","","Create new aggregate instance for specified type.",0],[10,"get_arg_type","","Return aggregated type.",0],[10,"get_container_type","","Return container type.",0],[10,"new_factory","","Produces factory usable as argument for other factories.",0],[0,"error","metafactory","Closure argument error types."],[1,"ArgCountMismatch","metafactory::error","Specified argument count does not match metafactory argument count."],[11,"expected","","",1],[11,"specified","","",1],[1,"ArgTypeMismatch","","Argument type did not match expected type."],[11,"expected_type","","",2],[11,"argument_index","","",2],[2,"FactoryErrorKind","","Getter creation error types."],[12,"ArgCountMismatch","","Incorrect number of arguments.",3],[12,"ArgTypeMismatch","","Incorrect argument type.",3],[10,"new","","Convenience method for creating new `ArgCountMismatch`.",1],[10,"new","","Convenience method for creating new `ArgTypeMismatch`.",2],[10,"get_type","alloc::rc","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"take","","",4],[10,"boxed_clone","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[10,"get_type","","",4],[10,"get_arg_types","","",4],[10,"new","","",4],[10,"new_aggregate","","",4],[6,"Getter","metafactory","Gettable value trait."],[9,"take","","Produce a new value.",5],[9,"boxed_clone","","Create a clone for this getter.",5],[6,"AsFactoryExt","","Downcast value to `Factory`."],[9,"as_factory_of","","Downcast to factory and consume `Box<Any>`.",6],[9,"as_factory_clone_of","","Downcast to factory by creating factory clone.",6],[6,"MetaFactory","","Implements reflection and initiation of any abstract object constructor."],[9,"get_type","","",7],[9,"get_arg_types","","",7],[9,"new","","",7],[9,"new_aggregate","","",7],[6,"ToMetaFactory","","Trait for values convertable to `MetaFactory`."],[9,"to_metafactory","","Creates a `MetaFactory` that has information about object\nconstructor: produced object type, argument types, and\na method to get this getter.",8],[10,"new","","Create a new `Factory`.",9],[10,"take","","Get a new owned value.",9],[10,"clone","","",9],[10,"as_factory_of","alloc::boxed","",10],[10,"as_factory_clone_of","","",10]],"paths":[[1,"Aggregate"],[1,"ArgCountMismatch"],[1,"ArgTypeMismatch"],[2,"FactoryErrorKind"],[1,"Rc"],[6,"Getter"],[6,"AsFactoryExt"],[6,"MetaFactory"],[6,"ToMetaFactory"],[1,"Factory"],[1,"Box"]]};
searchIndex['typedef'] = {"items":[[0,"","typedef","<a href=\"https://github.com/Nercury/typedef-rs\">\n    <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\" alt=\"Fork me on GitHub\">\n</a>\n<style>.sidebar { margin-top: 53px }</style>\n TypeDef is used to identify and compare types, as well as print their names."],[1,"TypeDef","","Create a TypeDef structure to identify a type and to print its name."],[10,"clone","","",0],[10,"of","","Create a TypeDef structure from a type parameter.",0],[10,"id_of","","Get `TypeId` for specified type directly.",0],[10,"name_of","","Get type name for specified type directly.",0],[10,"is","","Check if typedef instance matches type.",0],[10,"get_str","","Get the static `&str` for typedef instance.",0],[10,"eq","","",0],[10,"fmt","","",0]],"paths":[[1,"TypeDef"]]};

initSearch(searchIndex);
